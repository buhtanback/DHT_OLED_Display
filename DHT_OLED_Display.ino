#include "Config.h"
#include <DHT.h>
#include <U8g2lib.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <TimeLib.h>
#include <Wire.h>

#define DHTPIN 4
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

#define TRIGGER_PIN 14
#define ECHO_PIN 27
#define BUTTON_PIN 32 

U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /* clock=*/ SCL, /* data=*/ SDA, /* reset=*/ U8X8_PIN_NONE);


const char *url = "http://api.openweathermap.org/data/2.5/weather?q=Khmelnytskyi&lang=ua&appid=89b5c4878e84804573dae7a6c3628e94&units=metric";


#define skeletor_width 64
#define skeletor_height 64

const static unsigned char skeletor_bits[4][512] PROGMEM = {
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x0e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xc6, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf9,
    0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfe, 0xbf, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x20, 0xff, 0x7f, 0x02, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xff,
    0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xff, 0xff, 0x09, 0x00, 0x00,
    0x00, 0x00, 0x24, 0xfe, 0x3f, 0x12, 0x00, 0x00, 0x00, 0x00, 0xf6, 0xfd,
    0xdf, 0x37, 0x00, 0x00, 0x00, 0x00, 0xda, 0xfb, 0xef, 0x2d, 0x00, 0x00,
    0x00, 0x00, 0x8d, 0xff, 0xff, 0x58, 0x00, 0x00, 0x00, 0x80, 0x05, 0xfe,
    0x3f, 0xd0, 0x00, 0x00, 0x00, 0x80, 0x05, 0x30, 0x06, 0xd0, 0x00, 0x00,
    0x00, 0x80, 0x05, 0x90, 0x04, 0xd0, 0x00, 0x00, 0x00, 0xc0, 0x05, 0xc8,
    0x09, 0xd0, 0x01, 0x00, 0x00, 0xc0, 0x06, 0xce, 0x39, 0xb0, 0x01, 0x00,
    0x00, 0xe0, 0xfa, 0xff, 0xff, 0xaf, 0x03, 0x00, 0x00, 0xe0, 0xfe, 0xfe,
    0xbf, 0xbf, 0x03, 0x00, 0x00, 0x70, 0x7f, 0xff, 0x7f, 0x7f, 0x07, 0x00,
    0x00, 0x70, 0xbf, 0x5f, 0xfd, 0x7e, 0x07, 0x00, 0x00, 0x70, 0xbf, 0x6f,
    0xfb, 0x7e, 0x07, 0x00, 0x00, 0x78, 0xcf, 0x6b, 0xeb, 0x79, 0x0f, 0x00,
    0x00, 0x78, 0x4f, 0x6d, 0x5b, 0x79, 0x0f, 0x00, 0x00, 0x38, 0x86, 0x0d,
    0xd8, 0x30, 0x0e, 0x00, 0x00, 0x3c, 0x82, 0x00, 0x80, 0x20, 0x1e, 0x00,
    0x00, 0x3c, 0x10, 0x00, 0x00, 0x04, 0x1e, 0x00, 0x00, 0x3c, 0x18, 0x60,
    0x03, 0x0c, 0x1e, 0x00, 0x00, 0x3c, 0x3c, 0x6c, 0x1b, 0x1e, 0x1e, 0x00,
    0x00, 0x3c, 0x3c, 0x5c, 0x1d, 0x1e, 0x1e, 0x00, 0x00, 0x3e, 0x3c, 0xf7,
    0x77, 0x1e, 0x3e, 0x00, 0x00, 0x3e, 0x3c, 0xfd, 0x5f, 0x1e, 0x3e, 0x00,
    0x00, 0x3e, 0x78, 0xfe, 0x3f, 0x0f, 0x3e, 0x00, 0x00, 0x3e, 0xf8, 0xff,
    0xff, 0x0f, 0x3e, 0x00, 0x00, 0x3e, 0xf8, 0xff, 0xff, 0x0f, 0x3e, 0x00,
    0x00, 0x3f, 0xf8, 0xff, 0xff, 0x0f, 0x7e, 0x00, 0x00, 0x3f, 0xf8, 0x1f,
    0xfc, 0x0f, 0x7e, 0x00, 0x00, 0x3f, 0xf8, 0x07, 0xf0, 0x0f, 0x7e, 0x00,
    0x00, 0x3f, 0xf8, 0x01, 0xc0, 0x0f, 0x7e, 0x00, 0x00, 0x3f, 0xf0, 0x00,
    0x80, 0x07, 0x7e, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00,
    0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x3f, 0x00, 0x00,
    0x00, 0x00, 0x7e, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00,
    0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x7f, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0x00, 0x80, 0xff, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00,
    0x80, 0xff, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00, 0x80, 0xff, 0x01, 0x00,
    0x00, 0xc0, 0xff, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0xe0, 0xff, 0x01,
    0xe0, 0xff, 0x07, 0x00, 0x00, 0xf0, 0xff, 0x03, 0xe0, 0xff, 0x0f, 0x00,
    0x00, 0xf8, 0xff, 0x03, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0xfc, 0xff, 0x0f,
    0xf8, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0xfc, 0xff, 0x00,
    0x80, 0xff, 0x1f, 0x00, 0x00, 0xe0, 0xff, 0x03, 0xe0, 0xff, 0x03, 0x00,
    0x00, 0xc0, 0xff, 0x0f, 0xf8, 0xff, 0x01, 0x00, 0x00, 0x00, 0xfe, 0x3f,
    0xfe, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x1f, 0x00, 0x00,
    0x00, 0x00, 0xf0, 0x0f, 0xf8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x0e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xc6, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf9,
    0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfe, 0xbf, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x20, 0xff, 0x7f, 0x02, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xff,
    0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xff, 0xff, 0x09, 0x00, 0x00,
    0x00, 0x00, 0x24, 0xfe, 0x3f, 0x12, 0x00, 0x00, 0x00, 0x00, 0xf6, 0xfd,
    0xdf, 0x37, 0x00, 0x00, 0x00, 0x00, 0xda, 0xfb, 0xef, 0x2d, 0x00, 0x00,
    0x00, 0x00, 0x8d, 0xff, 0xff, 0x58, 0x00, 0x00, 0x00, 0x80, 0x05, 0xfe,
    0x3f, 0xd0, 0x00, 0x00, 0x00, 0x80, 0x05, 0x30, 0x06, 0xd0, 0x00, 0x00,
    0x00, 0x80, 0x05, 0x90, 0x04, 0xd0, 0x00, 0x00, 0x00, 0xc0, 0x05, 0xc8,
    0x09, 0xd0, 0x01, 0x00, 0x00, 0xc0, 0x06, 0xce, 0x39, 0xb0, 0x01, 0x00,
    0x00, 0xe0, 0xfa, 0xff, 0xff, 0xaf, 0x03, 0x00, 0x00, 0xe0, 0xfe, 0xfe,
    0xbf, 0xbf, 0x03, 0x00, 0x00, 0x70, 0x7f, 0xff, 0x7f, 0x7f, 0x07, 0x00,
    0x00, 0x70, 0xbf, 0x5f, 0xfd, 0x7e, 0x07, 0x00, 0x00, 0x70, 0xbf, 0x6f,
    0xfb, 0x7e, 0x07, 0x00, 0x00, 0x78, 0xcf, 0x6b, 0xeb, 0x79, 0x0f, 0x00,
    0x00, 0x78, 0x4f, 0x6d, 0x5b, 0x79, 0x0f, 0x00, 0x00, 0x38, 0x86, 0x0d,
    0xd8, 0x30, 0x0e, 0x00, 0x00, 0x3c, 0x82, 0x00, 0x80, 0x20, 0x1e, 0x00,
    0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x3c, 0x00, 0x00,
    0x00, 0x00, 0x1e, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00,
    0x00, 0x3c, 0x10, 0x00, 0x00, 0x04, 0x1e, 0x00, 0x00, 0x3e, 0x18, 0x60,
    0x03, 0x0c, 0x3e, 0x00, 0x00, 0x3e, 0x3c, 0x6c, 0x1b, 0x1e, 0x3e, 0x00,
    0x00, 0x3e, 0x3c, 0x5c, 0x1d, 0x1e, 0x3e, 0x00, 0x00, 0x3e, 0x3c, 0xf7,
    0x77, 0x1e, 0x3e, 0x00, 0x00, 0x3e, 0x3c, 0xfd, 0x5f, 0x1e, 0x3e, 0x00,
    0x00, 0x3f, 0x78, 0xfe, 0x3f, 0x0f, 0x7e, 0x00, 0x00, 0x3f, 0xf8, 0xff,
    0xff, 0x0f, 0x7e, 0x00, 0x00, 0x3f, 0xf8, 0xff, 0xff, 0x0f, 0x7e, 0x00,
    0x00, 0x3f, 0xf8, 0xff, 0xff, 0x0f, 0x7e, 0x00, 0x00, 0x3f, 0xf8, 0x1f,
    0xfc, 0x0f, 0x7e, 0x00, 0x00, 0x3f, 0xf8, 0x07, 0xf0, 0x0f, 0x7e, 0x00,
    0x00, 0x3f, 0xf8, 0x01, 0xc0, 0x0f, 0x7e, 0x00, 0x00, 0x3f, 0xf0, 0x00,
    0x80, 0x07, 0x7e, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00,
    0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x7f, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0x00, 0x80, 0xff, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00,
    0x80, 0xff, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00, 0x80, 0xff, 0x01, 0x00,
    0x00, 0xc0, 0xff, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0xe0, 0xff, 0x01,
    0xe0, 0xff, 0x07, 0x00, 0x00, 0xf0, 0xff, 0x03, 0xe0, 0xff, 0x0f, 0x00,
    0x00, 0xf8, 0xff, 0x03, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0xfc, 0xff, 0x0f,
    0xf8, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0xfc, 0xff, 0x00,
    0x80, 0xff, 0x1f, 0x00, 0x00, 0xe0, 0xff, 0x03, 0xe0, 0xff, 0x03, 0x00,
    0x00, 0xc0, 0xff, 0x0f, 0xf8, 0xff, 0x01, 0x00, 0x00, 0x00, 0xfe, 0x3f,
    0xfe, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x1f, 0x00, 0x00,
    0x00, 0x00, 0xf0, 0x0f, 0xf8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x00, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3,
    0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xfc, 0x1f, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x30, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff,
    0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xff, 0xff, 0x19, 0x00, 0x00,
    0x00, 0x00, 0xec, 0xff, 0xff, 0x3b, 0x00, 0x00, 0x00, 0x00, 0xf3, 0xff,
    0xff, 0x47, 0x00, 0x00, 0x00, 0x80, 0x08, 0xff, 0xff, 0x88, 0x00, 0x00,
    0x00, 0x80, 0x08, 0xff, 0xff, 0x88, 0x00, 0x00, 0x00, 0xc0, 0xfc, 0xfe,
    0x3f, 0xbf, 0x01, 0x00, 0x00, 0x40, 0xf6, 0xfd, 0xdf, 0x77, 0x01, 0x00,
    0x00, 0xa0, 0xe3, 0xff, 0xff, 0xe3, 0x02, 0x00, 0x00, 0xb0, 0x01, 0xff,
    0x7f, 0x80, 0x06, 0x00, 0x00, 0xb0, 0x01, 0x38, 0x0e, 0x80, 0x06, 0x00,
    0x00, 0x30, 0x01, 0x38, 0x0e, 0x80, 0x06, 0x00, 0x00, 0x30, 0x01, 0x98,
    0x08, 0xc0, 0x06, 0x00, 0x00, 0x38, 0x01, 0xc4, 0x11, 0xc0, 0x0e, 0x00,
    0x00, 0xd8, 0x01, 0xc7, 0x71, 0xc0, 0x0d, 0x00, 0x00, 0x9c, 0xfe, 0xff,
    0xff, 0xbf, 0x1d, 0x00, 0x00, 0x9c, 0x7f, 0xff, 0x7f, 0xff, 0x1d, 0x00,
    0x00, 0xee, 0xbf, 0xff, 0xff, 0xfc, 0x3b, 0x00, 0x00, 0xce, 0xbf, 0xff,
    0xff, 0xfc, 0x3b, 0x00, 0x00, 0xce, 0xdf, 0x5f, 0xfd, 0xf9, 0x3b, 0x00,
    0x00, 0xde, 0xdf, 0x6b, 0xeb, 0xf9, 0x3b, 0x00, 0x00, 0xdf, 0xe3, 0x6d,
    0xdb, 0xe7, 0x79, 0x00, 0x00, 0xdf, 0xa3, 0x6e, 0xbb, 0xe6, 0x79, 0x00,
    0x00, 0x8f, 0xc1, 0x06, 0xb0, 0xc1, 0x70, 0x00, 0x80, 0x8f, 0x40, 0x00,
    0x00, 0x81, 0xf0, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00,
    0x80, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x80, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0xf8, 0x00, 0x80, 0x0f, 0x08, 0x00, 0x00, 0x18, 0xf8, 0x00,
    0xc0, 0x0f, 0x0c, 0x60, 0x03, 0x38, 0xf8, 0x01, 0xc0, 0x0f, 0x1f, 0x6c,
    0x1b, 0x7c, 0xf8, 0x01, 0x80, 0x0f, 0x1e, 0x5e, 0x3d, 0x7c, 0xf8, 0x01,
    0x80, 0x0f, 0x9e, 0xf7, 0xef, 0x7c, 0xf8, 0x01, 0x80, 0x0f, 0x9e, 0xfe,
    0xbf, 0x3c, 0xf8, 0x00, 0xc0, 0x0f, 0x3c, 0xff, 0x7f, 0x1e, 0xf8, 0x01,
    0xc0, 0x0f, 0xfc, 0xff, 0xff, 0x1f, 0xf8, 0x01, 0xc0, 0x0f, 0xfc, 0xff,
    0xff, 0x1f, 0xf8, 0x01, 0xc0, 0x0f, 0xfc, 0xff, 0xff, 0x1f, 0xf8, 0x01,
    0xc0, 0x1f, 0xfc, 0x1f, 0xfc, 0x1f, 0xf8, 0x01, 0xc0, 0x1f, 0xfc, 0x07,
    0xf0, 0x1f, 0xfc, 0x01, 0xc0, 0x1f, 0xfc, 0x01, 0x80, 0x1f, 0xfc, 0x01,
    0xc0, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xfc, 0x01, 0xc0, 0x1f, 0x00, 0x00,
    0x00, 0x00, 0xfc, 0x01, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01,
    0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xc0, 0x7f, 0x00, 0x00,
    0x00, 0x00, 0xff, 0x01, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xff, 0x01,
    0xc0, 0xff, 0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 0xe0, 0xff, 0x01, 0x00,
    0x00, 0xc0, 0xff, 0x03, 0xf0, 0xff, 0x07, 0x00, 0x00, 0xe0, 0xff, 0x07,
    0xf0, 0xff, 0x0f, 0x00, 0x00, 0xf8, 0xff, 0x07, 0xfc, 0xff, 0x3f, 0x00,
    0x00, 0xfe, 0xff, 0x1f, 0x00, 0xfe, 0xff, 0x00, 0x80, 0xff, 0x3f, 0x00,
    0x00, 0xe0, 0xff, 0x03, 0xe0, 0xff, 0x07, 0x00, 0x00, 0xc0, 0xff, 0x0f,
    0xf8, 0xff, 0x01, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x3f, 0x00, 0x00,
    0x00, 0x00, 0xfc, 0x07, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x00, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3,
    0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xfc, 0x1f, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x30, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff,
    0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xff, 0xff, 0x19, 0x00, 0x00,
    0x00, 0x00, 0xec, 0xff, 0xff, 0x3b, 0x00, 0x00, 0x00, 0x00, 0xf3, 0xff,
    0xff, 0x47, 0x00, 0x00, 0x00, 0x80, 0x08, 0xff, 0xff, 0x88, 0x00, 0x00,
    0x00, 0x80, 0x08, 0xff, 0xff, 0x88, 0x00, 0x00, 0x00, 0xc0, 0xfc, 0xfe,
    0x3f, 0xbf, 0x01, 0x00, 0x00, 0x40, 0xf6, 0xfd, 0xdf, 0x77, 0x01, 0x00,
    0x00, 0xa0, 0xe3, 0xff, 0xff, 0xe3, 0x02, 0x00, 0x00, 0xb0, 0x01, 0xff,
    0x7f, 0x80, 0x06, 0x00, 0x00, 0xb0, 0x01, 0x38, 0x0e, 0x80, 0x06, 0x00,
    0x00, 0x30, 0x01, 0x38, 0x0e, 0x80, 0x06, 0x00, 0x00, 0x30, 0x01, 0x98,
    0x08, 0xc0, 0x06, 0x00, 0x00, 0x38, 0x01, 0xc4, 0x11, 0xc0, 0x0e, 0x00,
    0x00, 0xd8, 0x01, 0xc7, 0x71, 0xc0, 0x0d, 0x00, 0x00, 0x9c, 0xfe, 0xff,
    0xff, 0xbf, 0x1d, 0x00, 0x00, 0x9c, 0x7f, 0xff, 0x7f, 0xff, 0x1d, 0x00,
    0x00, 0xee, 0xbf, 0xff, 0xff, 0xfc, 0x3b, 0x00, 0x00, 0xce, 0xbf, 0xff,
    0xff, 0xfc, 0x3b, 0x00, 0x00, 0xce, 0xdf, 0x5f, 0xfd, 0xf9, 0x3b, 0x00,
    0x00, 0xde, 0xdf, 0x6b, 0xeb, 0xf9, 0x3b, 0x00, 0x00, 0xdf, 0xe3, 0x6d,
    0xdb, 0xe7, 0x79, 0x00, 0x00, 0xdf, 0xa3, 0x6e, 0xbb, 0xe6, 0x79, 0x00,
    0x00, 0x8f, 0xc1, 0x06, 0xb0, 0xc1, 0x70, 0x00, 0x80, 0x8f, 0x40, 0x00,
    0x00, 0x81, 0xf0, 0x00, 0x80, 0x0f, 0x08, 0x00, 0x00, 0x18, 0xf8, 0x00,
    0x80, 0x0f, 0x0c, 0x60, 0x03, 0x38, 0xf8, 0x00, 0x80, 0x0f, 0x1f, 0x6c,
    0x1b, 0x7c, 0xf8, 0x00, 0x80, 0x0f, 0x1e, 0x5e, 0x3d, 0x7c, 0xf8, 0x00,
    0xc0, 0x0f, 0x9e, 0xf7, 0xef, 0x7c, 0xf8, 0x01, 0xc0, 0x0f, 0x9e, 0xfe,
    0xbf, 0x3c, 0xf8, 0x01, 0x80, 0x0f, 0x3c, 0xff, 0x7f, 0x1e, 0xf8, 0x01,
    0x80, 0x0f, 0xfc, 0xff, 0xff, 0x1f, 0xf8, 0x01, 0x80, 0x0f, 0xfc, 0xff,
    0xff, 0x1f, 0xf8, 0x00, 0xc0, 0x0f, 0xfc, 0xff, 0xff, 0x1f, 0xf8, 0x01,
    0xc0, 0x0f, 0xfc, 0x1f, 0xfc, 0x1f, 0xf8, 0x01, 0xc0, 0x0f, 0xfc, 0x07,
    0xf0, 0x1f, 0xf8, 0x01, 0xc0, 0x0f, 0xfc, 0x01, 0x80, 0x1f, 0xf8, 0x01,
    0xc0, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x01, 0xc0, 0x1f, 0x00, 0x00,
    0x00, 0x00, 0xfc, 0x01, 0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01,
    0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0xc0, 0x1f, 0x00, 0x00,
    0x00, 0x00, 0xfc, 0x01, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01,
    0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xc0, 0x7f, 0x00, 0x00,
    0x00, 0x00, 0xff, 0x01, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xff, 0x01,
    0xc0, 0xff, 0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 0xe0, 0xff, 0x01, 0x00,
    0x00, 0xc0, 0xff, 0x03, 0xf0, 0xff, 0x07, 0x00, 0x00, 0xe0, 0xff, 0x07,
    0xf0, 0xff, 0x0f, 0x00, 0x00, 0xf8, 0xff, 0x07, 0xfc, 0xff, 0x3f, 0x00,
    0x00, 0xfe, 0xff, 0x1f, 0x00, 0xfe, 0xff, 0x00, 0x80, 0xff, 0x3f, 0x00,
    0x00, 0xe0, 0xff, 0x03, 0xe0, 0xff, 0x07, 0x00, 0x00, 0xc0, 0xff, 0x0f,
    0xf8, 0xff, 0x01, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x3f, 0x00, 0x00,
    0x00, 0x00, 0xfc, 0x07, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }
};



enum ScreenMode {
  OUTSIDE_WEATHER,
  INSIDE_TEMPERATURE_HUMIDITY
};

ScreenMode currentScreen = OUTSIDE_WEATHER;

int joystickXValue = 0;
int joystickYValue = 0;

void u8g2_triangle(uint8_t a) {
    u8g2.clearBuffer();
    u8g2.drawStr(0, 0, "drawTriangle");
    u8g2.drawTriangle(14, 7, 45, 30, 10, 40);
    u8g2.drawTriangle(14 + a, 7 - a, 45 + a, 30 - a, 57 + a, 10 - a);
    u8g2.drawTriangle(57 + a * 2, 10, 45 + a * 2, 30, 86 + a * 2, 53);
    u8g2.drawTriangle(10 + a, 40 + a, 45 + a, 30 + a, 86 + a, 53 + a);
    u8g2.sendBuffer();
}


void animateTriangle() {
  u8g2.clearBuffer(); 

  for (uint8_t a = 0; a <= 10; a++) { 
    u8g2.clearBuffer(); 

   
    switch (a % 4) { 
    case 0: u8g2.drawXBMP( 32, 0, skeletor_width, skeletor_height, skeletor_bits[0]);break;
    case 1: u8g2.drawXBMP( 32, 0, skeletor_width, skeletor_height, skeletor_bits[1]);break;
    case 2: u8g2.drawXBMP( 32, 0, skeletor_width, skeletor_height, skeletor_bits[0]);break;
    case 3: u8g2.drawXBMP( 32, 0, skeletor_width, skeletor_height, skeletor_bits[1]);break;
    case 4: u8g2.drawXBMP( 32, 0, skeletor_width, skeletor_height, skeletor_bits[2]);break;
    case 5: u8g2.drawXBMP( 32, 0, skeletor_width, skeletor_height, skeletor_bits[3]);break;
    case 6: u8g2.drawXBMP( 32, 0, skeletor_width, skeletor_height, skeletor_bits[2]);break;
    case 7: u8g2.drawXBMP( 32, 0, skeletor_width, skeletor_height, skeletor_bits[3]);break;
    case 8: u8g2.drawXBMP( 32, 0, skeletor_width, skeletor_height, skeletor_bits[2]);break;
    case 9: u8g2.drawXBMP( 32, 0, skeletor_width, skeletor_height, skeletor_bits[1]);break;
    }

    u8g2.sendBuffer(); 
    delay(100); 
  }
}

void showImage() {
  u8g2.clearBuffer();
  u8g2.drawBitmap(0, 0, 16, 128, image);
  u8g2.sendBuffer();
}

void setup() {
  Serial.begin(9600);
  dht.begin();
  u8g2.begin();
  u8g2.clearBuffer();

  showImage();

  delay(2000);

  u8g2.clearBuffer();

  u8g2.enableUTF8Print();
  u8g2.setFont(u8g2_font_cu12_t_cyrillic);
  u8g2.setCursor(10, 35);
  u8g2.print("ПІШОВ НАХУЙ");
  u8g2.sendBuffer();

  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected");

  setTimeFromAPI();

  pinMode(BUTTON_PIN, INPUT_PULLUP); 
  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
}

void loop() {
  float distance = measureDistance(); 

  if (distance <= 25 && distance > 10) { 
    showInsideTemperatureHumidity(); 
  } else if (distance <= 5) {
    animateTriangle(); 
    delay(500); 
  } else {
    showOutsideWeather();
  }

  delay(100);
}

void switchScreen() {
  if (currentScreen == INSIDE_TEMPERATURE_HUMIDITY) {
    currentScreen = OUTSIDE_WEATHER;
  } else {
    currentScreen = INSIDE_TEMPERATURE_HUMIDITY;
  }
}

void setTimeFromAPI() {
  HTTPClient http;

  http.begin(url1);
  int httpCode = http.GET();

  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();

    DynamicJsonDocument doc(1024);
    DeserializationError error = deserializeJson(doc, payload);

    if (!error) {
      long unixTime = doc["unixtime"];
      setTime(unixTime + 3 * 3600);
      Serial.println("Time set from API");
    } else {
      Serial.println("Failed to parse JSON");
    }
  } else {
    Serial.println("Failed to get time from API");
  }

  http.end();
}

String getCurrentTime() {
  int currentHour = hour();
  int currentMinute = minute();
  int currentSecond = second();
  int currentDay = day();
  int currentMonth = month();
  int currentYear = year() % 100;

  String currentTime = String("");
  currentTime += currentDay < 10 ? "0" + String(currentDay) : String(currentDay);
  currentTime += ".";
  currentTime += currentMonth < 10 ? "0" + String(currentMonth) : String(currentMonth);
  currentTime += ".";
  currentTime += currentYear < 10 ? "0" + String(currentYear) : String(currentYear);
  currentTime += " ";
  currentTime += currentHour < 10 ? "0" + String(currentHour) : String(currentHour);
  currentTime += ":";
  currentTime += currentMinute < 10 ? "0" + String(currentMinute) : String(currentMinute);
  currentTime += ":";
  currentTime += currentSecond < 10 ? "0" + String(currentSecond) : String(currentSecond);

  return currentTime;
}

void getTemperatureFromWeb(float& temperatureWeb, String& weatherDescription) {
  HTTPClient http;
  http.begin(url);
  int httpCode = http.GET();

  float tempTemperatureWeb = -999.0;
  String tempWeatherDescription;

  if (httpCode > 0) {
    String payload = http.getString();
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, payload);
    
    tempTemperatureWeb = doc["main"]["temp"];
    tempWeatherDescription = doc["weather"][0]["description"].as<String>();  // Явное преобразование в String
  }

  temperatureWeb = tempTemperatureWeb;
  weatherDescription = tempWeatherDescription;

  http.end();
}

void showOutsideWeather() {
  float temperatureWeb;
  String weatherDescription;

  getTemperatureFromWeb(temperatureWeb, weatherDescription);
  temperatureWeb = round(temperatureWeb);

  String currentTime = getCurrentTime();

  u8g2.clearBuffer();
  u8g2.enableUTF8Print();
  u8g2.setFont(u8g2_font_cu12_t_cyrillic);
  u8g2.setCursor(0, 15);
  u8g2.print("Вулиця: ");
  u8g2.print(temperatureWeb, 1);
  u8g2.print(" C");
  u8g2.setCursor(0, 30);
  u8g2.print("Хмари: ");
  u8g2.print(weatherDescription);
  u8g2.setCursor(0, 45);
  u8g2.print(currentTime);
  u8g2.sendBuffer();

  Serial.print("Temperature: ");
  Serial.print(temperatureWeb, 1);
  Serial.print(" C, Weather: ");
  Serial.print(weatherDescription);
  Serial.print(", Time: ");
  Serial.println(currentTime);
}


void readDHTSensor(float& temperature, float& humidity) {
  delay(2000);
  temperature = dht.readTemperature();
  humidity = dht.readHumidity();
}

void showInsideTemperatureHumidity() {
  float temperatureDHT, humidityDHT;
  readDHTSensor(temperatureDHT, humidityDHT);

  String currentTime = getCurrentTime();

  u8g2.clearBuffer();
  u8g2.enableUTF8Print();
  u8g2.setFont(u8g2_font_cu12_t_cyrillic);
  u8g2.setCursor(0, 15);
  u8g2.print("Кімната: ");
  u8g2.print(temperatureDHT);
  u8g2.print(" C");
  u8g2.setCursor(0, 30);
  u8g2.print("Волога: ");
  u8g2.print(humidityDHT);
  u8g2.print(" %");
  u8g2.setCursor(0, 45);
  u8g2.print(currentTime);
  u8g2.sendBuffer();

  Serial.print("Room: ");
  Serial.print(temperatureDHT);
  Serial.print(" C, Vlaga: ");
  Serial.print(humidityDHT);
  Serial.print(" %, Time:  ");
  Serial.println(currentTime);
}

float measureDistance() {
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);

  float duration = pulseIn(ECHO_PIN, HIGH);
  float distance = duration * 0.034 / 2; 

  return distance;
}
